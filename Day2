1. Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed. USe function - int removeElement(int[],int)

#include<stdio.h>
void removeElement(int x[],int y,int size);
void removeElement(int x[],int y,int size)
{
  int index;
  for(int i=0;i<size;i++)
  {
    
    if(x[i]==y)
    {
      index=i;
      break;
    }
  }
  if(index!=-1)
  {
    for(int i=index;i<size-1;i++)
    {
      x[i]=x[i+1];
    }
    for(int i=0;i<size-1;i++)
    {
      printf("\n nums[%d] : %d",i,x[i]);
    }
  }
  
  
  
}
int main()
{
  int nums[5]={1,2,6,7,8};
  int length=sizeof(nums)/sizeof(nums[0]);
  int val;
  int n;
   for(int i=0;i<length;i++)
  {
    printf("\n nums[%d] = %d",i,nums[i]);
  }
  
  printf("\n Enter the value for val");
  scanf("%d",&val);
  removeElement(nums,val,length);
  

  return 0;
}

2. Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order. Use function - int searchInsert(int[], int)

#include<stdio.h>
int searchInsert(int x[],int y,int size);
int searchInsert(int x[],int y,int size)
{
  for(int i=0;i<size;i++)
  {
    if(x[i]==y)
    {
      printf("%d",i);
    }
    else{
      for(int i=0;i<size;i++)
      {
        if(y>x[i])
        {
          continue;
        }
        else{
          int index=i;
          int temp;
          for(int j=index;i>size+1;j++)
          {
            temp=x[index];
            x[index]=y;
            x[index+1]=temp;

          }
          
        }
      }

    }
    for(int i=0;i<size;i++)
    {
      printf("\n arr[%d] : %d",i,x[i]);
    }
  }
}
int main()
{
  int arr[5]={1,4,5,7,8};
  int size=sizeof(arr)/sizeof(arr[0]);
  for(int i=0;i<size;i++)
  {
    printf("\n arr[%d] : %d",i,arr[i]);
  }
  int n;
  printf("\n Enter the number ");
  scanf("%d",&n);
  searchInsert(arr,n,size);

  return 0;
}

3. A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.Given a string s, return true if it is a palindrome, or false otherwise. USe function - bool isPalindrome(char*)


#include<stdio.h>
#include<string.h>
int main()
{
  char a[]={'a','b','b','a'};
  int l=0;
  int length= sizeof(a)/sizeof(a[0]);
 
  int b=length-1;
  while(a[l++]!=a[b--])
  {
    printf("Not a Palindrome");
    return 0;
  }
  printf("Palindrom phase");
  return 0;
}

4. You are given an array of characters letters that is sorted in non-decreasing order, and a character target. There are at least two different characters in letters. Return the smallest character in letters that is lexicographically greater than target. If such a character does not exist, return the first character in letters. Use function - char nextGreatestLetter(char**, char)

%%writefile lexi.c
#include<stdio.h>
char nextGreatestLetter(char a[],char n,int len){
  for(int i=0;i<len;i++)
  {
    if((int)a[i]>(int)n)
    {
      return a[i];
    }
  }
  return 0;
  
}
int main()
{
  char a[5]={'c','d','f','g','h'};
  int len=sizeof(a)/sizeof(a[0]);
  char n;
  printf("Enter the target");
  scanf("%c",&n);
  printf("%c",nextGreatestLetter(a,n,len));
  return 0;
}
